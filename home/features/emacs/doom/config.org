#+TITLE: Emacs Configuration
#+AUTHOR: Keith Butler
#+auto_tangle: t


* Table Of Contents :Toc:quote:
#+BEGIN_QUOTE
- [[#header-comments][Header Comments]]
  - [[#configel][config.el]]
  - [[#packagesel][packages.el]]
  - [[#initel][init.el]]
- [[#initel-1][init.el]]
- [[#general-configuration][General Configuration]]
  - [[#user-setup][User Setup]]
  - [[#theme][Theme]]
  - [[#background-transparency][Background Transparency]]
  - [[#font][Font]]
  - [[#line-numbering][Line Numbering]]
  - [[#spell-checker][Spell Checker]]
  - [[#displaying-world-time][Displaying World Time]]
  - [[#ligatures][Ligatures]]
  - [[#word-count][Word Count]]
  - [[#avoid-long-line-performance-hit][Avoid Long-line Performance Hit]]
  - [[#deft-variables][Deft Variables]]
  - [[#pdf-tools][PDF Tools]]
  - [[#yas-snippets][Yas Snippets]]
  - [[#direnv-integration][direnv integration]]
  - [[#zoxide-integration][zoxide integration]]
- [[#org][org]]
  - [[#latex-exporter][LaTeX Exporter]]
  - [[#style][Style]]
  - [[#pretty-mode][Pretty Mode]]
  - [[#heading-size][Heading Size]]
  - [[#setting-directory-variables][Setting directory variables]]
  - [[#org-agenda][org-agenda]]
  - [[#org-roam][org-roam]]
  - [[#org-ref][org-ref]]
  - [[#org-pomodoro][org-pomodoro]]
  - [[#org-appear][org-appear]]
  - [[#org-publish][org-Publish]]
  - [[#org-auto-tangle][org-auto-tangle]]
  - [[#openwith][openwith]]
- [[#languanges][Languanges]]
  - [[#org-babel-do-load-languages][Org-babel-do-load-languages]]
  - [[#programming][Programming]]
  - [[#design][Design]]
- [[#applications][Applications]]
  - [[#erc][ERC]]
  - [[#vterm][Vterm]]
#+END_QUOTE

* Header Comments
** config.el
#+begin_src  emacs-lisp :results none
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/keith/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

** packages.el
#+begin_src  emacs-lisp :results none :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src

** init.el
#+begin_src  emacs-lisp :results none :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

#+end_src

* init.el
This code is written to the init.el to select which modules to load. Written here as-is for now, as it is quite well structured and clear.
#+begin_src  emacs-lisp :results none :tangle init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe); the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy +prescient -childframe
           -fuzzy +icons)  ; a search engine for love and life
       ;; vertico           ; the search engine of the future

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides     ; highlighted indent columns
       (ligatures +extra)  ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       (syntax +childframe); tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       (java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript
        +lsp)              ;all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ledger            ; be audit you can be
       (lua +lsp)        ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org               ; organize your plain life in plain text
        +pretty
        +roam2
        +dragndrop
        +ipython
        +pandoc
        +pomodoro
        +present)
       ;;php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python            ; beautiful is better than ugly
        +poetry
        +lsp
        +pyright)
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

* COMMENT EXWM
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! exwm)
#+end_src

#+begin_src  emacs-lisp :results none
(require 'exwm)
(require 'exwm-config)
(exwm-config-example)

(setq exwm-workspace-number 9)

(require 'exwm-randr)
(setq exwm-randr-workspace-output-plist '(0 "eDP"))
(add-hook 'exwm-randr-screen-change-hook
          (lambda ()
            (start-process-shell-command
             "xrandr" nil "xrandr --output eDP--left-of HDMI-A-0 --auto")))
(exwm-randr-enable)

(defun exwm-change-screen-hook ()
  (let ((xrandr-output-regexp "\n\\([^ ]+\\) connected ")
        default-output)
    (with-temp-buffer
      (call-process "xrandr" nil t nil)
      (goto-char (point-min))
      (re-search-forward xrandr-output-regexp nil 'noerror)
      (setq default-output (match-string 1))
      (forward-line)
      (if (not (re-search-forward xrandr-output-regexp nil 'noerror))
          (call-process "xrandr" nil nil nil "--output" default-output "--auto")
        (call-process
         "xrandr" nil nil nil
         "--output" (match-string 1) "--primary" "--auto"
         "--output" default-output "--off")
        (setq exwm-randr-workspace-output-plist (list 0 (match-string 1)))))))

(require 'exwm-systemtray)
(exwm-systemtray-enable)
#+end_src

* General Configuration
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.

** User Setup
#+begin_src  emacs-lisp :results none
(setq user-full-name "Keith Butler"
      user-mail-address "20089137@mail.wit.ie")

;; (setq steam-username "Keithamine") ;; Replace Keithamine with your steam username
#+end_src

** Theme
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! catppuccin-theme)
#+end_src

#+begin_src  emacs-lisp :results none
(setq doom-theme 'catppuccin)
;; (setq doom-theme 'doom-one)
#+end_src

** Background Transparency
This fixed an issue where upon first install the background was almost invisible.
#+begin_src  emacs-lisp :results none
(set-frame-parameter (selected-frame) 'alpha '(100 100))
(add-to-list 'default-frame-alist '(alpha 100 100))
#+end_src

** Font
#+begin_src  emacs-lisp :results none
;;(setq doom-font (font-spec :family "FiraCode" :size 12)
;;      ;; doom-variable-pitch-font (font-spec :family "ETBembo" :size 18)
;;      doom-variable-pitch-font (font-spec :family "Alegreya" :size 12))
#+end_src

** Line Numbering
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src  emacs-lisp :results none
(setq display-line-numbers-type 'relative)
#+end_src

** Spell Checker
Default for the spell checker is english
#+begin_src  emacs-lisp :results none
(setq ispell-dictionary "en")
#+end_src

** Displaying World Time
=display-time-world= command provides a nice display of the time at a specified
list of timezones.  Nice for working in a team with remote members.
#+begin_src  emacs-lisp :results none
(setq display-time-world-list
'(("Etc/UTC" "UTC")
    ("America/Los_Angeles" "Seattle")
    ("America/New_York" "New York")
    ("Europe/Athens" "Athens")
    ("Pacific/Auckland" "Auckland")
    ("Asia/Shanghai" "Shanghai")))
(setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")
#+end_src

** Ligatures
I like ligatures, but some of the ones that get enabled by the (ligatures +extra) module donâ€™t work in the font I use, or I donâ€™t like them, so I disable them.
Taken from [[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][zzamboni's config]]
#+begin_src  emacs-lisp :results none
(plist-put! +ligatures-extra-symbols
  :and           nil
  :or            nil
  :for           nil
  :not           nil
  :true          nil
  :false         nil
  :int           nil
  :float         nil
  :str           nil
  :bool          nil
  :list          nil
)
#+end_src



#+begin_src  emacs-lisp :results none
(let ((ligatures-to-disable '(:true :false :int :float :str :bool :list :and :or :for :not)))
  (dolist (sym ligatures-to-disable)
    (plist-put! +ligatures-extra-symbols sym nil)))
#+end_src

** Word Count
Enable showing a word count in the modeline. This is only shown for the modes listed in doom-modeline-continuous-word-count-modes (Markdown, GFM and Org by default).
#+begin_src  emacs-lisp :results none
(setq doom-modeline-enable-word-count t)
#+end_src

** Avoid Long-line Performance Hit
When a file has lines longer than so-long-threshold, so-long mode is enabled. This prevents files with long lines from slowing down emacs. Doom sets this to 400, which is too small for me.
#+begin_src  emacs-lisp :results none
(after! so-long
  (setq so-long-threshold 10000))
#+end_src

** Deft Variables
Setting the files deft uses and what directories to look in.
#+begin_src  emacs-lisp :results none
(setq deft-extensions '("txt" "tex" "md" "org"))
(setq deft-directory "~/workspace/org/roam")
(setq deft-recursive t)
#+end_src

** PDF Tools
[[https://github.com/politza/pdf-tools][PDF Tools]] is, among other things, a replacement of DocView for PDF files. The key difference is that pages are not pre-rendered by e.g. ghostscript and stored in the file-system, but rather created on-demand and stored in memory.
#+begin_src emacs-lisp
(use-package pdf-tools
  :init
  (pdf-loader-install))
  ;; (pdf-tools-install))
#+end_src
** Yas Snippets
Use yas snippets templating package
#+begin_src emacs-lisp
(use-package yasnippet
  :config

  (yas-global-mode 1))
#+end_src

** COMMENT dired-preview
https://protesilaos.com/emacs/dired-preview
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! dired-preview)
#+end_src

#+begin_src  emacs-lisp :results none
(require 'dired-preview)
(add-hook 'dired-mode-hook #'dired-preview-mode)
#+end_src

** COMMENT dired dragon-drop
#+begin_src  emacs-lisp :results none
(map! :map dired-mode-map
      :leader :desc "Opens file in dragon-drop" :gnv "l" (start-process "" nil "dragon-drop" (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "dragon-drop" fPath)) ) (dired-get-marked-files) ))
#+end_src

** direnv integration
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! direnv)
#+end_src
** zoxide integration
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! zoxide)
#+end_src
* org
** LaTeX Exporter
#+begin_src  emacs-lisp :results none
(after! org
  (use-package! ox-extra
    :config
    (ox-extras-activate '(latex-header-blocks ignore-headlines))))

(after! org
  ;; Import ox-latex to get org-latex-classes and other funcitonality
  ;; for exporting to LaTeX from org
  (use-package! ox-latex
    :init
    ;; code here will run immediately
    :config
    ;; code here will run after the package is loaded
    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f"))
    (setq org-latex-with-hyperref nil) ;; stop org adding hypersetup{author..} to latex export
    ;; (setq org-latex-prefer-user-labels t)

    ;; deleted unwanted file extensions after latexMK
    (setq org-latex-logfiles-extensions
          (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist")))

    (unless (boundp 'org-latex-classes)
      (setq org-latex-classes nil))))
#+end_src

** Style
Symbol at the end of a folded block.
By default its =blockname...=
This changes it so it's =blockname â–¾=
#+begin_src  emacs-lisp :results none
(after! org
  (setq org-startup-folded 'overview
        org-ellipsis " â–¾ "
        org-list-demote-modifier-bullet '(("+" . "-") ("-" . "+"))))
#+end_src

** Pretty Mode
org-pretty-mode hides ** // == characters when not hovering over works they surround.

Automatically starts org-pretty-mode alongside org-mode
#+begin_src  emacs-lisp :results none
(add-hook! 'org-mode-hook
           #'+org-pretty-mode)
#+end_src

** Heading Size
Use different font sizes for headlines and define sections for a fixed-pitch font.
#+begin_src  emacs-lisp :results none
(after! org
  (custom-set-faces!
    '(org-document-title :height 1.3)
    '(org-level-1 :inherit outline-1 :weight extra-bold :height 1.2)
    '(org-level-2 :inherit outline-2 :weight bold :height 1.15)
    '(org-level-3 :inherit outline-3 :weight bold :height 1.12)
    '(org-level-4 :inherit outline-4 :weight bold :height 1.09)
    '(org-level-5 :inherit outline-5 :weight semi-bold :height 1.06)
    '(org-level-6 :inherit outline-6 :weight semi-bold :height 1.03)
    '(org-level-7 :inherit outline-7 :weight semi-bold)
    '(org-level-8 :inherit outline-8 :weight semi-bold)
    ;; Ensure that anything that should be fixed-pitch in org buffers appears that way
    '(org-block nil :foreground nil :inherit 'fixed-pitch)
    '(org-code nil   :inherit '(shadow fixed-pitch))
    '(org-table nil   :inherit '(shadow fixed-pitch))
    '(org-verbatim nil :inherit '(shadow fixed-pitch))
    '(org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    '(org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    '(org-checkbox nil :inherit 'fixed-pitch)))
#+end_src

** TODO Setting directory variables
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src  emacs-lisp :results none
(setq org-directory "/home/keith/workspace/org")
(after! org
    ;; (setq org-agenda-files '("~/workspace/org/roam/*.org"))
    ;; (setq org-agenda-files (directory-files-recursively org-directory ".org$"))
    ;; (setq org-agenda-files (list "/home/keith/workspace/org/roam"))
    (setq org-log-done 'time)
)
(set-file-template! "/roam/.+\\.org$" 'org-mode :ignore t)
;; https://github.com/bradydonald/.emacs.d
;; (defun my/org-agenda-files ()
;;   ;; org files for agenda
;;   (setq ofiles (directory-files-recursively org-directory "org$"))
;;   ;; some may be encrypted though
;;   (setq gfiles (directory-files-recursively org-directory "org.gpg$"))
;;   (append ofiles gfiles))

;; (setq org-agenda-files (my/org-agenda-files))
#+end_src

** org-agenda
*** org-super-agenda
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! org-super-agenda)
#+end_src

#+begin_src  emacs-lisp :results none
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-day nil ;; i.e. today
      org-agenda-span 7
      org-agenda-start-on-weekday nil)
  (setq org-agenda-custom-commands
        '(("c" "Super view"
           ((agenda "" ((org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:name "Today"
                                  :time-grid t
                                  :date today
                                  :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:log t)
                            (:name "To refile"
                                   :file-path "refile\\.org")
                            (:name "Next to do"
                                   :tag "NEXT"
                                   :order 1)
                            (:name "Important"
                                   :priority "A"
                                   :order 6)
                            (:name "Today's tasks"
                                   :file-path "journal/")
                            (:name "Due Today"
                                   :deadline today
                                   :order 2)
                            (:name "Scheduled Soon"
                                   :scheduled future
                                   :order 8)
                            (:name "Overdue"
                                   :deadline past
                                   :order 7)
                            (:name "Meetings"
                                   :and (:todo "MEET" :scheduled future)
                                   :order 10)
                            (:discard (:not (:todo "TODO")))))))))))
  :config
  (org-super-agenda-mode))
#+end_src

*** org-timeblock
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! org-timeblock)
#+end_src

#+begin_src  emacs-lisp :results none
#+end_src

** org-roam
Org-roam-ui tries to keep up with the latest features of org-roam, which conflicts with Doom Emacs's desire for stability.
To make sure nothing breaks, use the latest version of org-roam by unpinning it.
#+begin_src  emacs-lisp :results none :tangle packages.el
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

#+begin_src  emacs-lisp :results none
(use-package org-roam
  :ensure t
  :demand t  ;; Ensure org-roam is loaded by default
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/workspace/org/roam")
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))
#+end_src

The buffer you put this code in must have lexical-binding set to t!
See the final configuration at the end for more details.

*** Fast note insertion for a smoother writing flow
Sometimes while writing, you'll want to create a new node in your Org Roam notes without interrupting your writing flow! Typically you would use =org-roam-node-insert=, but when you create a new note with this command, it will open the new note after it gets created.

We can define a function that enables you to create a new note and insert a link in the current document without opening the new note's buffer.

This will allow you to quickly create new notes for topics you're mentioning while writing so that you can go back later and fill those notes in with more details!
#+begin_src  emacs-lisp :results none
;; Bind this to C-c n I
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src
This function takes the first capture template in =org-roam-capture-templates= (usually the "default" template) and adds the =:immediate-finish t= [[https://orgmode.org/manual/Template-elements.html#Template-elements][capture property]] to prevent the note buffer from being loaded once capture finishes:

Thanks to [[https://www.youtube.com/watch?v=AyhPmypHDEw&lc=Ugw7bYrPOc6oy_UBmPZ4AaABAg][Umar Ahmad]] for the snippet!

*** Build your Org agenda from Org Roam Notes
One of the most useful features of Org Mode is the agenda view. You can actually use your Org Roam notes as the source for this view!

Typically you won't want to pull in *all* of your Org Roam notes, so we'll only use the notes with a specific tag like =Project=.

Here is a snippet that will find all the notes with a specific tag and then set your =org-agenda-list= with the corresponding note files.
#+begin_src  emacs-lisp :results none
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

;; Build the agenda list the first time for the session
(my/org-roam-refresh-agenda-list)
#+end_src
Check out the Org agenda now by running =M-x org-agenda= and press a to see the daily schedule or =d= for the list of all =TODOs= in your project files.

For best results, make sure to add the desired tag to new note files as part of your capture template (=Project= in this case). Just remember to call =my/org-roam-refresh-agenda-list= to refresh the list after creating a new note with that tag!

*NOTE:* I couldn't find a reliable, efficient way to pull dailies into the agenda yet! As soon as I do, I might make another video on it.

**** TIP: Improving the appearance of notes in the agenda view
You may notice that the agenda lines that come from your Org Roam files look a little unattractive due to the timestamped file names. We can fix this by adding a category to the header lines of one of our project files like so:
#+begin_example
#+title: Mesche
#+category: Mesche
#+filetags: Project
#+end_example

Typically you will want to have the category contain the same name as the note so we can update our Project template from =Org Roam Episode 2= to include it automatically:
#+begin_src  emacs-lisp :results none
;; ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
;;  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
;;  :unnarrowed t)
#+end_src

*** Selecting from a list of notes with a specific tag
The org-roam-node-find function gives us the ability to filter the list of notes that get displayed for selection.

We can define our own function that shows a selection list for notes that have a specific tag like Project which we talked about before. This can be useful to set up a keybinding to quickly select from a specific set of notes!

One added benefit is that we can override the set of capture templates that get used when a new note gets created.

This means that we can automatically create a new note with our project capture template if the note doesn't already exist!
#+begin_src  emacs-lisp :results none
(defun my/org-roam-project-finalize-hook ()
  "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
  ;; Remove the hook since it was added temporarily
  (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Add project file to the agenda list if the capture was confirmed
  (unless org-note-abort
    (with-current-buffer (org-capture-get :buffer)
      (add-to-list 'org-agenda-files (buffer-file-name)))))

(defun my/org-roam-find-project ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "Project")
   :templates
   '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
      :unnarrowed t))))

(global-set-key (kbd "C-c n p") #'my/org-roam-find-project)
#+end_src
One useful aspect of this snippet is that the =org-capture-after-finalize-hook= allows us to ensure a new project note is automatically added to the Org agenda by calling the =my/org-roam-project-finalize-hook= function we defined earlier!

*** Streamlined custom capture for tasks and notes
Org Roam provides a low-level function called =org-roam-capture-= (yes, the hyphen is there!) which allows you to invoke note capture functionality in a very flexible way. More information can be found in the Org Roam manual: [[https://www.orgroam.com/manual.html#Extending-the-Capture-System][Extending the Capture System]].

We can use this function to optimize specific parts of our capture workflow!

Here are a couple of ways you might use it:

**** Keep an inbox of notes and tasks
If you want to quickly capture new notes and tasks with a single keybinding into a place that you can review later, we can use =org-roam-capture-= to capture to a single-specific file like =Inbox.org=!

Even though this file won't have the timestamped filename, it will still be treated as a node in your Org Roam notes.

#+begin_src  emacs-lisp :results none
(defun my/org-roam-capture-inbox ()
  (interactive)
  (org-roam-capture- :node (org-roam-node-create)
                     :templates '(("i" "inbox" plain "* %?"
                                  :if-new (file+head "Inbox.org" "Inbox\n")))))

(global-set-key (kbd "C-c n b") #'my/org-roam-capture-inbox)
#+end_src

**** Capture a task directly into a specific project
If you've set up project note files like we mentioned earlier, you can set up a capture template that allows you to quickly capture tasks for any project.

Much like the example before, we can either select a project that exists or automatically create a project note when it doesn't exist yet!

#+begin_src  emacs-lisp :results none
(defun my/org-roam-capture-task ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Capture the new task, creating the project file if necessary
  (org-roam-capture- :node (org-roam-node-read
                            nil
                            (my/org-roam-filter-by-tag "Project"))
                     :templates '(("p" "project" plain "* TODO %?"
                                   :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                          "${title}\n#+category: ${title}\n#+filetags: Project"
                                                          ("Tasks"))))))

(global-set-key (kbd "C-c n t") #'my/org-roam-capture-task)
#+end_src

One important thing to point out here is that we're using =file+head+olp= in the capture template so that we can drop the new task entry under the "Tasks" heading.

We're also using the =my/org-roam-project-finalize-hook= function we defined earlier so that any new project gets added to the Org agenda!
*** Automatically copy (or move) completed tasks to dailies
One interesting use for daily files is to keep a log of tasks that were completed on that particular day. What if we could automatically copy completed tasks in *any* Org Mode file to today's daily file?

We can do this by adding some custom code!

The following snippet sets up a hook for all Org task state changes and then copies the completed (DONE) entry to today's note file:
#+begin_src  emacs-lisp :results none
(defun my/org-roam-copy-todo-to-today ()
  (interactive)
  (let ((org-refile-keep t) ;; Set this to nil to delete the original!
        (org-roam-dailies-capture-templates
          '(("t" "tasks" entry "%?"
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
        (org-after-refile-insert-hook #'save-buffer)
        today-file
        pos)
    (save-window-excursion
      (org-roam-dailies--capture (current-time) t)
      (setq today-file (buffer-file-name))
      (setq pos (point)))

    ;; Only refile if the target file is different than the current file
    (unless (equal (file-truename today-file)
                   (file-truename (buffer-file-name)))
      (org-refile nil nil (list "Tasks" today-file nil pos)))))

(add-to-list 'org-after-todo-state-change-hook
             (lambda ()
               (when (equal org-state "DONE")
                 (my/org-roam-copy-todo-to-today))))
#+end_src
If you want to move the completed task instead, set =org-refile-keep= in this code to =nil=!

This code is a little more advanced, so consult the next section to learn more about how it works!

**** How it works
To be notified on changes to =TODO= item states, we add the =my/org-roam-copy-todo-to-today= function to the =org-after-todo-state-change-hook= list.

When the user completes a task, this function will set up a "daily" temporary capture template which will jump to a heading called "Tasks" in the file for today's date. This is wrapped in a =save-window-excursion= call to ensure that the capture job won't change your window configuration and current buffer.

If the file being captured to is not the file for the current date, we call =org-refile= to copy (or move if =org-refile-keep= is =nil=) the item to the new location! This avoids moving a completed task back into the file it already lives in (this will raise an error!)

*** org-roam-ui
Here's a very basic sample configuration of =org-roam= using =use-package=:
Obtained from the [[https://github.com/org-roam/org-roam][org-roam]] github.
#+begin_src  emacs-lisp :results none
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
    ;; :hook (after-init . org-roam-ui-mode)
    :custom
    (org-roam-directory "~/workspace/org/roam/")
    (org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%I:%M %p>: %?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

** org-ref
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! org-ref)
#+end_src

** org-pomodoro
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! pomodoro)
(package! org-pomodoro)
#+end_src

#+begin_src  emacs-lisp :results none
(after! org
  (setq org-clock-sound "~/.doom.d/ding.mp3"))
#+end_src

** org-appear
Use [[https://github.com/awth13/org-appear][org-appear]] to reveal emphasis markers when moving the cursor over them.
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! org-appear
  :recipe (:host github
           :repo "awth13/org-appear"))
#+end_src

#+begin_src  emacs-lisp :results none
(add-hook! org-mode :append #'org-appear-mode)
#+end_src

** org-Publish
#+begin_src  emacs-lisp :results none
(setq org-publish-use-timestamps-flag nil)
(setq org-export-with-broken-links t)
(setq org-publish-project-alist
      '(("keithbutler.xyz"
         :base-drectory "~/workspace/org/keithbutler.xyz/"
         :base-extension "org"
         :publishing-directory "~/workspace/org/keithbutler.xyz/html/"
         :recursive t
         :exclude "org-html-themes/.*"
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :auto-preamble t)))
#+end_src

** org-auto-tangle
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! org-auto-tangle)
#+end_src

#+begin_src  emacs-lisp :results none
(use-package org-auto-tangle
  :load-path "site-lisp/org-auto-tangle/"    ;; this line is necessary only if you cloned the repo in your site-lisp directory
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** openwith
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! openwith)
#+end_src

#+begin_src  emacs-lisp :results none
(when (require 'openwith nil 'noerror)
    (setq openwith-associations
        (list
            (list (openwith-make-extension-regexp
                '("mpg" "mpeg" "mp3" "mp4"
                    "avi" "wmv" "wav" "mov" "flv"
                    "ogm" "ogg" "mkv"))
                "mpv"
                '(file))
            (list (openwith-make-extension-regexp
                '("xbm" "pbm" "pgm" "ppm" "pnm"
                    "png" "gif" "bmp" "tif" "jpeg" "jpg"))
                "feh"
                '(file))
            (list (openwith-make-extension-regexp
                '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
                "libreoffice"
                '(file))
            '("\\.lyx" "lyx" (file))
            '("\\.chm" "kchmviewer" (file))
            (list (openwith-make-extension-regexp
                '("ps" "ps.gz" "dvi"))
                "okular"
                '(file))
            (list (openwith-make-extension-regexp
                '("xcf" "ai" "psd" "svg" "tu    b"))
                "gimp"
                '(file))
            (list (openwith-make-extension-regexp
                '("kdenlive"))
                "kdenlive"
                '(file))
            ))
    (openwith-mode 1))
#+end_src

* Languanges
** Org-babel-do-load-languages
#+begin_src emacs-lisp
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((mermaid . t)
   (scheme . t)
   (emacs-lisp . t)
   (python . t)
   (Kotlin . t)
   (bash . t)
   (sql . t)
   (rust . t)
   (plantuml. t)
   ))
#+end_src

** Programming
*** Mongodb
I'm currently using mongodb in college.
So these packages help alot when righting reports.
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! mongo)
(package! ob-mongo)
#+end_src

*** Kotlin
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! ob-kotlin)
#+end_src

** Design
*** ob-mermaid
[[https://github.com/arnm/ob-mermaid][GitHub - arnm/ob-mermaid: Generate mermaid diagrams within Emacs org-mode babel]]
#+begin_src  emacs-lisp :results none :tangle packages.el
(package! ob-mermaid)
#+end_src

*** Plantuml
#+begin_src emacs-lisp
(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
#+end_src

* Applications
** COMMENT Mail
#+begin_src  emacs-lisp :results none :tangle packages.el
(unpin! mu4e)
#+end_src

#+begin_src  emacs-lisp :results none
(use-package! mu4e
  ;; :defer 20 ; Wait until 20 seconds after startup
  :config

  ;; Load org-mode integration
  ;; (require 'org-mu4e)

  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-root-maildir "~/.local/share/mail")

  ;; Use Ivy for mu4e completions (maildir folders, etc)
  (setq mu4e-completing-read-function #'ivy-completing-read)

  ;; Make sure that moving a message (like to Trash) causes the
  ;; message to get a new file name.  This helps to avoid the
  ;; dreaded "UID is N beyond highest assigned" error.
  ;; See this link for more info: https://stackoverflow.com/a/43461973
  (setq mu4e-change-filenames-when-moving t)

  (set-email-account! "Personal"
  '((mu4e-sent-folder       . "/keithbutler2001-gmail/[Gmail]/Sent Mail")
    (mu4e-drafts-folder     . "/keithbutler2001-gmail/[Gmail]/Drafts")
    (mu4e-trash-folder      . "/keithbutler2001-gmail/[Gmail]/Bin")
    (mu4e-refile-folder     . "/keithbutler2001-gmail/[Gmail]/All Mail")
    (smtpmail-smtp-user     . "smtp.gmail.com")
    (user-mail-address      . "keithbutler2001@gmail.com")    ;; only needed for mu < 1.4
    (mu4e-compose-signature . "Regards\nKeith Butler"))
  t)
  (set-email-account! "College"
  '((mu4e-sent-folder       . "/20089137@mail.wit.ie/[Gmail]/Sent Mail")
    (mu4e-drafts-folder     . "/20089137@mail.wit.ie/[Gmail]/Drafts")
    (mu4e-trash-folder      . "/20089137@mail.wit.ie/[Gmail]/Bin")
    (mu4e-refile-folder     . "/20089137@mail.wit.ie/[Gmail]/All Mail")
    (smtpmail-smtp-user     . "smtp.gmail.com")
    (user-mail-address      . "20089137@mail.wit.ie")    ;; only needed for mu < 1.4
    (mu4e-compose-signature . "Regards\nKeith Butler"))
  t)
  ;; (set-email-account! "Work"
  ;; '((mu4e-sent-folder       . "/keith@keithbutler.xyz/Sent")
  ;;   (mu4e-drafts-folder     . "/keith@keithbutler.xyz/Drafts")
  ;;   (mu4e-trash-folder      . "/keith@keithbutler.xyz/Trash")
  ;;   (mu4e-refile-folder     . "/keith@keithbutler.xyz/Archive")
  ;;   (smtpmail-smtp-user     . "smtp.gmail.com")
  ;;   (user-mail-address      . "keith@keithbutler.xyz"))    ;; only needed for mu < 1.4
  ;; t)

(setq mu4e-context-policy 'ask-if-none
      mu4e-compose-context-policy 'always-ask)

  ;; Prevent mu4e from permanently deleting trashed items
  ;; This snippet was taken from the following article:
  ;; http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
  (defun remove-nth-element (nth list)
    (if (zerop nth) (cdr list)
      (let ((last (nthcdr (1- nth) list)))
        (setcdr last (cddr last))
        list)))
  (setq mu4e-marks (remove-nth-element 5 mu4e-marks))
  (add-to-list 'mu4e-marks
               '(trash
                 :char ("d" . "â–¼")
                 :prompt "dtrash"
                 :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
                 :action (lambda (docid msg target)
                           (mu4e-proc-move docid
                                           (mu4e-mark-check-target target) "-N"))))

  ;; Display options
  ;; (setq mu4e-view-show-images t)
  ;; (setq mu4e-view-show-addresses 't)

  ;; Composing mail
  (setq mu4e-compose-dont-reply-to-self t)

  ;; Use mu4e for sending e-mail
  (setq mail-user-agent 'mu4e-user-agent
        message-send-mail-function 'smtpmail-send-it
        mu4e-compose-signature '"\nRegards\nKeith"
        mu4e-compose-context-policy 'ask-if-none
        smtpmail-smtp-service 465
        smtpmail-stream-type 'ssl)

  ;; Signing messages (use mml-secure-sign-pgpmime)
  ;; (setq mml-secure-openpgp-signers '("53C41E6E41AAFE55335ACA5E446A2ED4D940BF14"))
  (setq mml-secure-openpgp-signers '("BFDA9493A1B0BCAE1FDDD95434E6FE022005CFAB"))
  (add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)


  ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
  ;; additional non-Gmail addresses and want assign them different
  ;; behavior.)

  ;; setup some handy shortcuts
  ;; you can quickly switch to your Inbox -- press ``ji''
  ;; then, when you want archive some messages, move them to
  ;; the 'All Mail' folder by pressing ``ma''.
  (setq mu4e-maildir-shortcuts
        '((:maildir "/keithbutler2001@gmail.com/[Gmail]/INBOX"       . ?i)
          (:maildir "/keithbutler2001@gmail.com/[Gmail]/Lists/*"     . ?l)
          (:maildir "/keithbutler2001@gmail.com/[Gmail]/Sent Mail"   . ?s)
          (:maildir "/keithbutler2001@gmail.com/[Gmail]/Trash"       . ?t)))

  ;; (add-to-list 'mu4e-bookmarks
  ;;              (make-mu4e-bookmark
  ;;               :name "All Inboxes"
  ;;               :query "maildir:/keithbutler2001@gmail.com/[Gmail]/INBOX OR maildir:/keith@keithbutler.xyz/INBOX OR maildir:/20089137@mail.wit.ie/[Gmail]/INBOX"
  ;;               :key ?i))

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)

  ;; Start mu4e in the background so that it syncs mail periodically
  (mu4e t))
#+end_src

** ERC
#+begin_src  emacs-lisp :results none
(setq erc-prompt (lambda () (concat "[" (buffer-name)"]"))
      erc-server "irc.libera.chat"
      erc-autojoin-channels-alist '(("irc.libera.chat" "#emacs" "#linux"))
      erc-nick "Quayth"
      ;; erc-user-full-name "Keith Butler"
      erc-auto-query 'bury
      erc-fill-column 100
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 20)
#+end_src

** Vterm
#+begin_src  emacs-lisp :results none :tangle packages.el
;; (package! )
#+end_src

#+begin_src  emacs-lisp :results none
(require 'vterm-module)
(setq vterm-shell "/bin/fish")          ;; default shell
(setq vterm-always-compile-module t)    ;; skip asking to compile
(setq vterm-max-scrollback 100000)
(setq vterm-kill-buffer-on-exit t)
#+end_src
